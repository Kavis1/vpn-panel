version: '3.8'

services:
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vpn_panel_migrations
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    volumes:
      - .:/app
    command: ["/bin/sh", "-c", "chmod +x /app/scripts/run_migrations.sh && /app/scripts/run_migrations.sh"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - vpn_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vpn-panel-backend
    restart: always
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8000
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
      - /app/venv
    command: >
      sh -c "
      echo '===== Starting VPN Panel Backend =====' &&
      echo 'Python version:' && python --version &&
      echo 'Pip version:' && pip --version &&
      echo 'Uvicorn version:' && python -c \"import uvicorn; print(f'Uvicorn version: {uvicorn.__version__}')\" && \
      echo 'Waiting for PostgreSQL...' &&
      until pg_isready -h db -p 5432 -U ${POSTGRES_USER} -d ${POSTGRES_DB}; do
        echo 'Waiting for PostgreSQL...';
        sleep 2;
      done &&
      echo 'Running migrations...' &&
      alembic upgrade head &&
      echo 'Starting Uvicorn server...' &&
      python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4 --log-level info
      "
    healthcheck:
      test: ["CMD", "sh", "-c", "python -m pip show uvicorn && python -c \"import uvicorn; print(uvicorn.__version__)\""]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:13-alpine
    container_name: vpn_panel_db
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - vpn_network

  redis:
    image: redis:7-alpine
    container_name: vpn_panel_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - vpn_network

  xray:
    image: teddysun/xray:latest
    container_name: vpn_panel_xray
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    network_mode: host
    volumes:
      - xray_config:/etc/xray
      - xray_certs:/etc/xray/certs
    environment:
      - TZ=UTC
    command: >
      sh -c "mkdir -p /etc/xray && \
      [ ! -f /etc/xray/config.json ] && \
      echo '{\n        \"log\": {\n          \"loglevel\": \"warning\",\n          \"access\": \"/var/log/xray/access.log\",\n          \"error\": \"/var/log/xray/error.log\"\n        },\n        \"inbounds\": [],\n        \"outbounds\": [\n          {\n            \"protocol\": \"freedom\",\n            \"settings\": {}\n          }\n        ],\n        \"routing\": {\n          \"domainStrategy\": \"AsIs\",\n          \"rules\": []\n        }\n      }' > /etc/xray/config.json; \
      /usr/bin/xray -config /etc/xray/config.json"
    depends_on:
      - db
    networks:
      - vpn_network

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vpn_panel_celery
    restart: unless-stopped
    command: celery -A app.worker worker --loglevel=info
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./app:/app/app
    depends_on:
      - db
      - redis
    networks:
      - vpn_network

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vpn_panel_celery_beat
    restart: unless-stopped
    command: celery -A app.worker beat --loglevel=info
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./app:/app/app
    depends_on:
      - db
      - redis
    networks:
      - vpn_network

  traefik:
    image: traefik:v2.10
    container_name: vpn_panel_traefik
    restart: unless-stopped
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
    networks:
      - vpn_network

networks:
  vpn_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_data:
  media_data:
  traefik_certs:
  xray_config:
  xray_certs:
