#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ VPN Panel.
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from app.main import app
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        from app import schemas, models, crud
        print("‚úÖ –°—Ö–µ–º—ã, –º–æ–¥–µ–ª–∏ –∏ CRUD –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        from app.api.deps import get_db, get_current_user
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ API –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_pydantic_warnings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Pydantic."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Pydantic...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ orm_mode
    schema_files = list(Path("backend/app/schemas").glob("*.py"))
    for file in schema_files:
        content = file.read_text(encoding='utf-8')
        if 'orm_mode = True' in content:
            issues.append(f"‚ùå {file.name}: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π 'orm_mode'")
    
    if issues:
        print("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
        for issue in issues:
            print(f"  {issue}")
        return False
    else:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True

def test_hardcoded_credentials():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç hardcoded credentials."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ hardcoded credentials...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª—ã
    env_files = [
        Path("backend/.env"),
        Path(".env.example")
    ]
    
    for env_file in env_files:
        if env_file.exists():
            content = env_file.read_text()
            if 'admin' in content.lower() and 'password' in content.lower():
                issues.append(f"‚ùå {env_file}: —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ credentials")
    
    if issues:
        print("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        for issue in issues:
            print(f"  {issue}")
        return False
    else:
        print("‚úÖ Hardcoded credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True

def test_absolute_paths():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python —Ñ–∞–π–ª—ã
    py_files = list(Path("backend").rglob("*.py"))
    for file in py_files:
        try:
            content = file.read_text(encoding='utf-8')
            if '/var/log' in content or '/usr/local' in content:
                issues.append(f"‚ùå {file.relative_to(Path('backend'))}: —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏")
        except:
            continue
    
    if issues:
        print("–ù–∞–π–¥–µ–Ω—ã –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏:")
        for issue in issues:
            print(f"  {issue}")
        return False
    else:
        print("‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ VPN Panel")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_pydantic_warnings,
        test_hardcoded_credentials,
        test_absolute_paths
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)